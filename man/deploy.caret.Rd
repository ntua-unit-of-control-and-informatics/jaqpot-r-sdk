% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/deploy_caret.R
\name{deploy.caret}
\alias{deploy.caret}
\title{Deploy A caret model on Jaqpot}
\usage{
deploy.caret(
  trained.model,
  preprocess.model = NULL,
  ensemble.model = NULL,
  replace = list("after", -100),
  ymax = NULL,
  ymin = NULL,
  ymean = NULL,
  ystd = NULL,
  url = "https://api.jaqpot.org/jaqpot/",
  ...
)
}
\arguments{
\item{trained.model}{An object of 'train' (function \code{train()} of package 'caret'). If an ensemble
of models is used, then the trained models should be enclosed in a list, with the same order as the one used in the ensemble}

\item{preprocess.model}{The preprocess model(s), with default value NULL.The model object(s) should be enclosed in a list. Consecutive
 preprocessing steps are supported by providing the consecutive preprocessing models with the same order in the list.
 DO NOT include the response into the preprocessing model! The preprocessing of the response should be done seperately and the
 detransformation step of the response is facilitated by the ymin, ymax, ymean and ystd arguments, depending on the preprocessing type used.
Allowed types of preprocessing: 'preProcess' and 'dummyVars' caret functions.}

\item{ensemble.model}{The ensemble model, with default value NULL. Only applicable type is stacked ensemble. Note that if an ensemble model is used, 
then the order of the models in the list provided in 'trained.model' should be the same as the one used in the stacking process.}

\item{replace}{used for NA substitution with a desired value. It should be a list of two arguments, with the first being either "before" or "after", 
for doing the substitution before or after the preprocessing step, and the second list argument is the desired replacement value. The default
replacement is after the preprocessing step with the value of -100.}

\item{ymax}{Maximum y value to be used for y detrasformation. This applies if y has been scaled using the \code{range} method of \code{preProcess()} function.}

\item{ymin}{Minimum y value to be used for y detrasformation. This applies if y has been scaled using the \code{range} method of \code{preProcess()} function.}

\item{ymean}{Mean of y to be used for y detrasformation. This applies if y has been scaled using the \code{c("center","scale")} method of \code{preProcess()} function.}

\item{ystd}{Standard deviation of y to be used for y detrasformation. This applies if y has been scaled using the \code{c("center","scale")} method of \code{preProcess()} function.}

\item{url}{The base path of Jaqpot services. This argument is optional and needs 
to be changed only if an alternative Jaqpot installation is used.}

\item{...}{Extra arguments to be passed down the R client. This is not recommended.}
}
\value{
The id of the uploaded model.
}
\description{
Uploads trained caret model on Jaqpot given
a "train" object.
}
\details{
The user can upload on Jaqpot a model that has been trained using the
 function \code{ctree()} of package 'party'. Apart from the model object, the user is requested
 to provide further information (i.e. Jaqpot API key or credentials, model title and short
 description etc.) via prompt messages. If the upload process is successful,
 the user is given a unique model id key.
}
\examples{
 \dontrun{
  #preprocessParams <- caret::preProcess(DATATrain, method=c("center","scale"))
  #DATATrainPre<-predict(preprocessParams, DATA1Train)
  dmyRTD<-dummyVars(~.,data=DATATrainPre)
  dmy_df<-predict(dmyRTD, newdata=DATATrainPre)
  #dmy_df[is.na(dmy_df)]<--20
  #trainControl<-trainControl(method="repeatedcv", number=20, repeats=3,verboseIter = FALSE,
  allowParallel = FALSE, savePredictions=TRUE)
  #fitXGB<-caret::train(y~., data =dmy_df, method="xgbTree", trControl=trainControl ,
               tuneGrid=tunegrid , importance=TRUE,verbosity=0) 
  #jaqpotr::deploy.caret(trained.model = fitXGB, preprocess.model = list(preprocessParams, dmyRTD), 
  replace = list("after", -20) )
}

}
